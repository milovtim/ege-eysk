buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.12.1'
        classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.5"
    }
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync
import groovy.text.SimpleTemplateEngine
// helpers
def filesOnlyFilter = { it.isFile() } as FileFilter
def baseName = {String fileName -> fileName.split('\\.')[0]}

ext {
    aws = [access: 'AKIAIV6TWXRXNOLRQN6A', secret: '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']
}

task deploy(type: S3Sync) {
    description = "Deploys Repetitor bucket"

    accessKey aws.access
    secretKey aws.secret

    configFile "synchronizer.properties"

    from "site/main"
    into "ege-eysk.ru"

    acl com.monochromeroad.gradle.plugin.aws.s3.ACL.PublicRead
}

task reviewsHtml << {
    ant.xslt(
        force: true,
        includes: 'project/reviews/*Reviews.xml',
        style: file('project/reviews/reviews.xsl'),
        destdir: file('project/reviews/html')
    )
}

task teachersHtml << {
    ant.xslt(
        force: true,
        in: 'project/teachers/teachers.xml',
        out: 'project/parts/teachers.html',
        style: 'project/teachers/teachers.xsl'
    )
}

task buildPages << {
    def templateExt = '.tmpl'
    def dataModel = file('project/parts')
        .listFiles(filesOnlyFilter)
        .collectEntries {[(baseName(it.name)), it.text]}

    def excludePartsKey = 'parts.exclude'
    if (project.hasProperty(excludePartsKey))
        project.property(excludePartsKey).split(",").each { dataModel.put(it, "")}
    def templateEngine = new SimpleTemplateEngine()

    //iterate on template files
    file('project').listFiles(filesOnlyFilter)
        .grep {it.name.endsWith(templateExt)}
        .each { File templateFile ->
            def resultFileName = "${baseName(templateFile.name)}.html"
            file("site/main/$resultFileName").withWriter {
                templateEngine
                    .createTemplate(templateFile)
                    .make(dataModel)
                    .writeTo(it)
            }
    }
}